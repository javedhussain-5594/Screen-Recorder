<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fair Screen Recorder Tool </title>
    <style>
body {
    font-family: Arial, sans-serif;
    background-color: #f0f0f0;
    color: #333;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    margin: 0;
}

.container {
    background-color: #fff;
    border-radius: 10px;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
    padding: 20px;
    text-align: center;
    width: 90%;
    max-width: 600px;
}

h1 {
    color: #4caf50;
    margin-bottom: 20px;
}

.controls {
    margin-bottom: 20px;
}

button {
    background-color: #4caf50;
    border: none;
    border-radius: 5px;
    color: #fff;
    cursor: pointer;
    font-size: 16px;
    margin: 5px;
    padding: 10px 20px;
    transition: background-color 0.3s;
}

button:disabled {
    background-color: #9e9e9e;
    cursor: not-allowed;
}

button:not(:disabled):hover {
    background-color: #45a049;
}

video {
    border-radius: 10px;
    width: 100%;
}

</style>
</head>
<body>
    <div class="container">
        <h1>Fair Screen Recorder Tool</h1>
        <div class="controls">
            <button id="start-record">Start Recording</button>
            <button id="stop-record" disabled>Stop Recording</button>
            <button id="download" disabled>Download</button>
        </div>
        <video id="video-preview" autoplay playsinline></video>
    </div>
    <script src="https://cdn.webrtc-experiment.com/RecordRTC.js"></script>
    <script>
const startRecordButton = document.getElementById('start-record');
const stopRecordButton = document.getElementById('stop-record');
const downloadButton = document.getElementById('download');
const videoPreview = document.getElementById('video-preview');

let recorder;
let stream;

startRecordButton.addEventListener('click', async () => {
    stream = await navigator.mediaDevices.getDisplayMedia({ video: true, audio: true });
    videoPreview.srcObject = stream;

    recorder = new RecordRTC(stream, {
        type: 'video',
        mimeType: 'video/webm',
        disableLogs: true,
    });

    recorder.startRecording();
    startRecordButton.disabled = true;
    stopRecordButton.disabled = false;
});

stopRecordButton.addEventListener('click', () => {
    recorder.stopRecording(() => {
        const blob = recorder.getBlob();
        const url = URL.createObjectURL(blob);
        videoPreview.srcObject = null;
        videoPreview.src = url;
        downloadButton.href = url;
        downloadButton.download = 'recording.webm';
        downloadButton.disabled = false;
    });

    stream.getTracks().forEach(track => track.stop());
    startRecordButton.disabled = false;
    stopRecordButton.disabled = true;
});

</script>
</body>
</html>
